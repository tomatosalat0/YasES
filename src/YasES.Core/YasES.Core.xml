<?xml version="1.0"?>
<doc>
    <assembly>
        <name>YasES.Core</name>
    </assembly>
    <members>
        <member name="T:YasES.Core.CausationEventCollector">
            <summary>
            All collected events will get the defined causation id set in their
            header. If a causation id is already set, it won't get adjusted.
            </summary>
        </member>
        <member name="F:YasES.Core.CheckpointToken.Beginning">
            <summary>
            Defines the first checkpoint token of the persistance store.
            </summary>
        </member>
        <member name="F:YasES.Core.CheckpointToken.Ending">
            <summary>
            Defines the last possible checkpoint token for the persistance store.
            </summary>
        </member>
        <member name="T:YasES.Core.CorrelationEventCollector">
            <summary>
            All collected events will get the defined correlation id set in their
            header. If a correlation id is already set, it won't get adjusted.
            </summary>
        </member>
        <member name="T:YasES.Core.EventCollector">
            <summary>
            A non-threadsafe simple event collector which simplifies the creation of
            a <see cref="T:YasES.Core.CommitAttempt"/>.
            </summary>
        </member>
        <member name="P:YasES.Core.EventCollector.IsEmpty">
            <summary>
            Returns true if no messages has been added yet, otherwise false.
            </summary>
        </member>
        <member name="P:YasES.Core.EventCollector.IsCommited">
            <summary>
            Returns true if <see cref="M:YasES.Core.EventCollector.BuildCommit(YasES.Core.StreamIdentifier,YasES.Core.CommitId)"/> has been executed, otherwise
            false.
            </summary>
        </member>
        <member name="M:YasES.Core.EventCollector.Add(System.Collections.Generic.IEnumerable{YasES.Core.IEventMessage})">
            <summary>
            Adds the provided <paramref name="messages"/> to the list of messages
            to commit.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is thrown if <see cref="M:YasES.Core.EventCollector.BuildCommit(YasES.Core.StreamIdentifier,YasES.Core.CommitId)"/> has been called before.</exception>
        </member>
        <member name="M:YasES.Core.EventCollector.BuildCommit(YasES.Core.StreamIdentifier,YasES.Core.CommitId)">
            <summary>
            Collects all previously added messages and adds them to a single
            <see cref="T:YasES.Core.CommitAttempt"/>. You can only call this method once.
            </summary>
        </member>
        <member name="T:YasES.Core.EventIdCollector">
            <summary>
            All collected events will get a new event id.
            </summary>
        </member>
        <member name="P:YasES.Core.EventMessage.EventName">
            <inheritdoc/>
        </member>
        <member name="P:YasES.Core.EventMessage.Headers">
            <inheritdoc/>
        </member>
        <member name="P:YasES.Core.EventMessage.Payload">
            <inheritdoc/>
        </member>
        <member name="P:YasES.Core.EventMessage.CreationDateUtc">
            <inheritdoc/>
        </member>
        <member name="P:YasES.Core.IEventCollector.IsEmpty">
            <summary>
            Returns true if no messages has been added yet, otherwise false.
            </summary>
        </member>
        <member name="P:YasES.Core.IEventCollector.IsCommited">
            <summary>
            Returns true if <see cref="M:YasES.Core.IEventCollector.BuildCommit(YasES.Core.StreamIdentifier,YasES.Core.CommitId)"/> has been executed, otherwise
            false.
            </summary>
        </member>
        <member name="M:YasES.Core.IEventCollector.Add(System.Collections.Generic.IEnumerable{YasES.Core.IEventMessage})">
            <summary>
            Adds the provided <paramref name="messages"/> to the list of messages
            to commit.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is thrown if <see cref="M:YasES.Core.IEventCollector.BuildCommit(YasES.Core.StreamIdentifier,YasES.Core.CommitId)"/> has been called before.</exception>
        </member>
        <member name="M:YasES.Core.IEventCollector.BuildCommit(YasES.Core.StreamIdentifier,YasES.Core.CommitId)">
            <summary>
            Collects all previously added messages and adds them to a single
            <see cref="T:YasES.Core.CommitAttempt"/>. You can only call this method once.
            </summary>
        </member>
        <member name="M:YasES.Core.IEventCollectorExtensions.BuildCommit(YasES.Core.IEventCollector,YasES.Core.StreamIdentifier)">
            <summary>
            Creates the <see cref="T:YasES.Core.CommitAttempt"/> with a generated <see cref="T:YasES.Core.CommitId"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.IEventCollectorExtensions.Add(YasES.Core.IEventCollector,YasES.Core.IEventMessage)">
            <summary>
            Adds the provided <paramref name="message"/> to the list of messages
            to commit.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is thrown if <see cref="M:YasES.Core.IEventCollector.BuildCommit(YasES.Core.StreamIdentifier,YasES.Core.CommitId)"/> has been called before.</exception>
        </member>
        <member name="M:YasES.Core.IEventCollectorExtensions.Add(YasES.Core.IEventCollector,YasES.Core.IEventMessage[])">
            <summary>
            Adds the provided <paramref name="messages"/> to the list of messages
            to commit.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is thrown if <see cref="M:YasES.Core.IEventCollector.BuildCommit(YasES.Core.StreamIdentifier,YasES.Core.CommitId)"/> has been called before.</exception>
        </member>
        <member name="P:YasES.Core.IEventMessage.EventName">
            <summary>
            Defines the name of the event.
            </summary>
        </member>
        <member name="P:YasES.Core.IEventMessage.Headers">
            <summary>
            Contains meta-information of the event.
            </summary>
        </member>
        <member name="P:YasES.Core.IEventMessage.Payload">
            <summary>
            The payload of the event.
            </summary>
        </member>
        <member name="P:YasES.Core.IEventMessage.CreationDateUtc">
            <summary>
            The point in time this instance was created on.
            </summary>
        </member>
        <member name="M:YasES.Core.IEventReadExtensions.ReadForwardFrom(YasES.Core.IEventRead,YasES.Core.StreamIdentifier,YasES.Core.CheckpointToken)">
            <summary>
            Returns a reader for the <paramref name="stream"/>, starting at <paramref name="lowerBoundExclusive"/> going to the future.
            </summary>
        </member>
        <member name="M:YasES.Core.IEventReadExtensions.ReadForwardFromTo(YasES.Core.IEventRead,YasES.Core.StreamIdentifier,YasES.Core.CheckpointToken,YasES.Core.CheckpointToken)">
            <summary>
            Returns a reader for the <paramref name="stream"/>, starting at <paramref name="lowerBoundExclusive"/> going to the future.
            The reader will end as soon as <paramref name="upperBoundExclusive"/> has been returned or no more messages
            could be found inside the store.
            </summary>
        </member>
        <member name="M:YasES.Core.IEventReadExtensions.ReadBackwardFrom(YasES.Core.IEventRead,YasES.Core.StreamIdentifier,YasES.Core.CheckpointToken)">
            <summary>
            Returns a reader for the <paramref name="stream"/>, starting at the <paramref name="upperBoundExclusive"/> going to the past.
            The reader will end as soon as the start of the stream has been reached.
            </summary>
        </member>
        <member name="M:YasES.Core.IEventReadExtensions.ReadBackwardFromTo(YasES.Core.IEventRead,YasES.Core.StreamIdentifier,YasES.Core.CheckpointToken,YasES.Core.CheckpointToken)">
            <summary>
            Returns a reader for the <paramref name="stream"/>, starting at the <paramref name="lowerBoundExclusive"/> going to the past.
            The reader will end as soon as <paramref name="upperBoundExclusive"/> has been returned or the start of the stream has been reached.
            Note that <paramref name="lowerBoundExclusive"/> must be greater than <paramref name="upperBoundExclusive"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.IEventWrite.Commit(YasES.Core.CommitAttempt)">
            <summary>
            Saves the provided <paramref name="attempt"/> to the persistant store.
            </summary>
        </member>
        <member name="P:YasES.Core.IStoredEventMessage.Checkpoint">
            <summary>
            The checkpoint token within the persistance store.
            </summary>
        </member>
        <member name="P:YasES.Core.IStoredEventMessage.CommitId">
            <summary>
            The id of the commit this message has been added to the persistance store.
            </summary>
        </member>
        <member name="P:YasES.Core.IStoredEventMessage.StreamIdentifier">
            <summary>
            Gets the stream identifier this message belongs to.
            </summary>
        </member>
        <member name="P:YasES.Core.IStoredEventMessage.CommitTimeUtc">
            <summary>
            The date+time value the message has been commited to the persistance store.
            </summary>
        </member>
        <member name="T:YasES.Core.ReadPredicate">
            <summary>
            Defines the filters to apply when reading from
            the event store. Note that a single stream predicate can not
            request streams from multiple buckets simultaniously.
            </summary>
        </member>
        <member name="P:YasES.Core.ReadPredicate.Streams">
            <summary>
            The streams to return within this request. Note that
            all streams must be in the same bucket.
            </summary>
        </member>
        <member name="P:YasES.Core.ReadPredicate.Reverse">
            <summary>
            True if the events get returned in the reverse
            order they were created. If false, the events
            get returned in the order they where added to the streams.
            </summary>
        </member>
        <member name="P:YasES.Core.ReadPredicate.EventNamesFilter">
            <summary>
            Optional: if null, no filtering based on the <see cref="P:YasES.Core.IEventMessage.EventName"/>
            will happen. If set, the list will
            contain the exact event names to filter by.
            See <see cref="P:YasES.Core.ReadPredicate.EventNamesIncluding"/> if the
            filter is "include" or "exclude".
            </summary>
        </member>
        <member name="P:YasES.Core.ReadPredicate.EventNamesIncluding">
            <summary>
            If true, only the events where <see cref="P:YasES.Core.IEventMessage.EventName"/> is in <see cref="P:YasES.Core.ReadPredicate.EventNamesFilter"/>
            are included in the result. If false, all events
            except those having <see cref="P:YasES.Core.IEventMessage.EventName"/> in <see cref="P:YasES.Core.ReadPredicate.EventNamesFilter"/>
            are be returned.
            </summary>
        </member>
        <member name="P:YasES.Core.ReadPredicate.CorrelationId">
            <summary>
            Optional: if null, this property will get ignored. If defined,
            only events having the same correlation id (specified by the key
            <see cref="F:YasES.Core.CommonMetaData.CorrelationId"/> within <see cref="P:YasES.Core.IEventMessage.Headers"/>)
            get returned.
            </summary>
        </member>
        <member name="P:YasES.Core.ReadPredicate.LowerExclusiveBound">
            <summary>
            Defines the exlusive lower bound for the checkpoint token. Only
            events which have a checkpoint token greater than this value
            will get returned. The lowest value will be <see cref="F:YasES.Core.CheckpointToken.Beginning"/>.
            </summary>
        </member>
        <member name="P:YasES.Core.ReadPredicate.UpperExclusiveBound">
            <summary>
            Defines the exlusive upper bound for the checkpoint token. Only
            events which have a checkpoint token smaller than this value
            will get returned. The highest value will be <see cref="F:YasES.Core.CheckpointToken.Ending"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.Forwards(YasES.Core.StreamIdentifier)">
            <summary>
            Returns all events which match the specified <paramref name="identifier"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.Forwards(YasES.Core.StreamIdentifier,YasES.Core.StreamIdentifier[])">
            <summary>
            Returns all events which match one of the specified <paramref name="identifier"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.Backwards(YasES.Core.StreamIdentifier)">
            <summary>
            Returns all events which match the specified <paramref name="identifier"/> in the reverse creation
            order.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.Backwards(YasES.Core.StreamIdentifier,YasES.Core.StreamIdentifier[])">
            <summary>
            Returns all events which match one of the specified <paramref name="identifier"/> in the reverse creation
            order.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterInit.FromStream(YasES.Core.StreamIdentifier)">
            <summary>
            Returns events where the stream id matches <paramref name="identifier"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterInit.FromStreams(System.Collections.Generic.IEnumerable{YasES.Core.StreamIdentifier})">
            <summary>
            Returns events where the stream id matches any of the provided <paramref name="identifiers"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterInit.FromStreams(YasES.Core.StreamIdentifier[])">
            <summary>
            Returns events where the stream id matches any of the provided <paramref name="identifiers"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterStreams.ReadForwards">
            <summary>
            The events are returned in the order they were commited.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterStreams.ReadBackwards">
            <summary>
            The events are returned in the reverse order they were commited.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterDirection.IncludeAllEvents">
            <summary>
            No filtering in <see cref="P:YasES.Core.IEventMessage.EventName"/> will get used.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterDirection.OnlyIncluding(System.Collections.Generic.IReadOnlySet{System.String})">
            <summary>
            Only events where <see cref="P:YasES.Core.IEventMessage.EventName"/> is within the provided set
            of allowed <paramref name="eventNames"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterDirection.AllExcluding(System.Collections.Generic.IReadOnlySet{System.String})">
            <summary>
            Only events where <see cref="P:YasES.Core.IEventMessage.EventName"/> is not within the provided set
            of <paramref name="excludingNames"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterEventFilter.HavingTheCorrelationId(System.String)">
            <summary>
            Only include events where the <see cref="P:YasES.Core.IEventMessage.Headers"/> contains a <see cref="F:YasES.Core.CommonMetaData.CorrelationId"/>
            and the value inside that header is equal to <paramref name="correlationId"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterEventFilter.WithoutCheckpointLimit">
            <summary>
            No further filtering is used.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterEventFilter.RaisedAfterCheckpoint(YasES.Core.CheckpointToken)">
            <summary>
            Only events which where saved after the provided <paramref name="token"/> are returned.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterEventFilter.RaisedBeforeCheckpoint(YasES.Core.CheckpointToken)">
            <summary>
            Only events which where saved before the provided <paramref name="token"/> are returned.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.IAfterEventFilter.RaisedBetweenCheckpoints(YasES.Core.CheckpointToken,YasES.Core.CheckpointToken)">
            <summary>
            Only events which where saved between the <paramref name="lowerBoundExclusive"/> and <paramref name="upperBoundExclusive"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.ReadPredicateBuilder.ICompleted.Build">
            <summary>
            Create the <see cref="T:YasES.Core.ReadPredicate"/> which can get passed to <see cref="M:YasES.Core.IEventRead.Read(YasES.Core.ReadPredicate)"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.IAfterInitExtensions.FromAllStreamsInBucket(YasES.Core.ReadPredicateBuilder.IAfterInit,System.String)">
            <summary>
            Include all events of all streams which are within the provided <paramref name="bucketId"/>.
            </summary>
        </member>
        <member name="M:YasES.Core.IAfterDirectionExtensions.OnlyIncluding(YasES.Core.ReadPredicateBuilder.IAfterDirection,System.String)">
            <summary>
            Only events where <see cref="P:YasES.Core.IEventMessage.EventName"/> is equal to <paramref name="eventName"/> are returned.
            </summary>
        </member>
        <member name="M:YasES.Core.IAfterDirectionExtensions.OnlyIncluding(YasES.Core.ReadPredicateBuilder.IAfterDirection,System.String,System.String[])">
            <summary>
            Only events where <see cref="P:YasES.Core.IEventMessage.EventName"/> is equal to one of <paramref name="eventName"/> are returned.
            </summary>
        </member>
        <member name="M:YasES.Core.IAfterDirectionExtensions.AllExcluding(YasES.Core.ReadPredicateBuilder.IAfterDirection,System.String)">
            <summary>
            Only events where <see cref="P:YasES.Core.IEventMessage.EventName"/> is not equal to <paramref name="eventName"/> are returned.
            </summary>
        </member>
        <member name="M:YasES.Core.IAfterDirectionExtensions.AllExcluding(YasES.Core.ReadPredicateBuilder.IAfterDirection,System.String,System.String[])">
            <summary>
            Only events where <see cref="P:YasES.Core.IEventMessage.EventName"/> is not equal to one of the <paramref name="eventName"/> are returned.
            </summary>
        </member>
        <member name="M:YasES.Core.ServiceCollection.RegisterSingleton``2(System.Func{YasES.Core.ServiceCollection,``1,``0})">
            <summary>
            Register a service of the provided <typeparamref name="TService"/> which depends on <typeparamref name="TDependsOn"/>.
            The factory result will be kept in memory for the lifetime of the service collection.
            </summary>
        </member>
        <member name="M:YasES.Core.ServiceCollection.RegisterSingleton``1(System.Func{YasES.Core.ServiceCollection,``0})">
            <summary>
            Register a service of the provided <typeparamref name="TService"/>.
            The factory result will be kept in memory for the lifetime of the service collection.
            </summary>
        </member>
        <member name="M:YasES.Core.ServiceCollection.RegisterTransient``1(System.Func{YasES.Core.ServiceCollection,``0})">
            <summary>
            Register a service of the provided <typeparamref name="TService"/>.
            Each time "Resolve" with the same type is called, the provided <paramref name="factory"/>
            method will be called. The result instance will not be saved within the service collection.
            </summary>
        </member>
        <member name="M:YasES.Core.ServiceCollection.Resolve``1">
            <summary>
            Returns an instance of the provided <typeparamref name="TService"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is thrown if <typeparamref name="TService"/> is not a registered type.</exception>
        </member>
        <member name="M:YasES.Core.ServiceCollection.Resolve(System.Type)">
            <summary>
            Returns an instance of the provided <paramref name="serviceType"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Is thrown if <paramref name="serviceType"/> is not a registered type.</exception>
        </member>
        <member name="M:YasES.Core.ServiceCollection.ResolveOrDefault``1(``0)">
            <summary>
            Returns an instance of the provided <typeparamref name="TService"/>. If no service is registed, <paramref name="default"/>
            will get returned.
            </summary>
        </member>
        <member name="M:YasES.Core.ServiceCollection.ResolveOrDefault(System.Type,System.Object)">
            <summary>
            Returns an instance of the provided <paramref name="serviceType"/>. If no service is registed, <paramref name="default"/>
            will get returned.
            </summary>
        </member>
        <member name="M:YasES.Core.ServiceCollection.Registration.DestroyFactory">
            <summary>
            memory optimization: when the factory isn't needed anymore,
            remove the reference to the action so it can get collected
            by the GC. A factory action might held references which are
            not needed anymore.
            </summary>
        </member>
        <member name="M:YasES.Core.StreamIdentifier.SingleStream(System.String,System.String)">
            <summary>
            Creates a stream identifier which points to exactly one stream. The
            stream is defined by <paramref name="streamId"/>.
            <paramref name="bucketId"/> and <paramref name="streamId"/> are case sensitive.
            </summary>
        </member>
        <member name="M:YasES.Core.StreamIdentifier.AllStreams(System.String)">
            <summary>
            Creates a stream identifier which points to all streams within the
            defined <paramref name="bucketId"/>. <paramref name="bucketId"/> is case sensitive.
            </summary>
        </member>
        <member name="M:YasES.Core.StreamIdentifier.StreamsPrefixedWith(System.String,System.String)">
            <summary>
            Creates a stream identifier which points to all streams where each streamId
            starts with the provided <paramref name="streamIdPrefix"/>. <paramref name="bucketId"/>
            and <paramref name="streamIdPrefix"/> are case sensitive.
            </summary>
        </member>
        <member name="P:YasES.Core.StreamIdentifier.BucketId">
            <summary>
            The bucket name the stream lives in.
            </summary>
        </member>
        <member name="P:YasES.Core.StreamIdentifier.StreamId">
            <summary>
            The name of the stream. <see cref="P:YasES.Core.StreamIdentifier.MatchesAllStreams"/> if the identifier
            is a wildcard identifier.
            </summary>
        </member>
        <member name="P:YasES.Core.StreamIdentifier.StreamIdPrefix">
            <summary>
            The prefix to search for. Only use this property if <see cref="P:YasES.Core.StreamIdentifier.IsSingleStream"/>
            and <see cref="P:YasES.Core.StreamIdentifier.MatchesAllStreams"/> return false.
            </summary>
        </member>
        <member name="P:YasES.Core.StreamIdentifier.MatchesAllStreams">
            <summary>
            Returns true if <see cref="P:YasES.Core.StreamIdentifier.StreamId"/> points to all streams, otherwise false.
            </summary>
        </member>
        <member name="P:YasES.Core.StreamIdentifier.IsSingleStream">
            <summary>
            Returns true if is a single stream identifier, otherwise false.
            </summary>
        </member>
        <member name="M:YasES.Core.StreamIdentifier.Matches(YasES.Core.StreamIdentifier)">
            <summary>
            Returns true if the current identifier matches <paramref name="other"/>.
            </summary>
        </member>
        <member name="P:YasES.Core.SystemClock.ResolveUtcNow">
            <summary>
            The resolver for the system clock. Do not use the resolver
            directly, use <see cref="P:YasES.Core.SystemClock.UtcNow"/>.
            </summary>
        </member>
        <member name="P:YasES.Core.SystemClock.UtcNow">
            <summary>
            Returns the system utc time.
            </summary>
        </member>
    </members>
</doc>
